export type BarChartProps = { title: string; bars: BarDatum[] }
export type BarDatum = { id: string; shortTitle: string; fullTitle: string; icon: string; content: Block; percent: number }
export type Block = { type: "RichTextBlock"; props: RichTextProps } | { type: "TabsBlock"; props: TabsProps } | { type: "InteractiveBrainBlock"; props: InteractiveBrainProps } | { type: "BarChartBlock"; props: BarChartProps } | { type: "NavBlock"; props: NavProps } | { type: "DefinitionBlock"; props: DefinitionProps } | { type: "DefinitionListBlock"; props: DefinitionListProps } | { type: "PlaceholderContainerBlock"; props: PlaceholderContainerProps } | { type: "ReferencesBlock"; props: ReferencesProps }
export type BrainComment = { icon: IconProps; symptom: string; highlightedRegions: BrainRegionName[]; overview: Block[]; description: Block[] }
export type BrainRegionName = "fronto-subcortical" | "orbitofrontal" | "anterior-cingulated-gyrus" | "bilateral-temporal-cortex" | "parietal-lobe" | "thalmus" | "hippocampus" | "amygdala" | "hypothalamus" | "anterior-cingulate-cortex" | "posterior-cingulate-cortex" | "striatum" | "prefrontal-cortex" | "ventral-frontal-cortex" | "frontal-lobe" | "dlpfc" | "vlpfc" | "nucleus-accumbens" | "basal-forebrain" | "anterior-caudate" | "grey-matter" | "lateral-ventricle" | "occipital-lobe" | "auditory-cortex" | "substantia-nigra" | "nucleus-accumbens-area" | "amyloid-stage-1-mild-region-1" | "amyloid-stage-2-moderate-region-1" | "amyloid-stage-2-mild-region-1" | "amyloid-stage-3-severe-region-1" | "amyloid-stage-3-moderate-region-1" | "amyloid-stage-3-moderate-region-2" | "locus-coeruleus" | "insula"
export type Camera = { reference_width: number; reference_height: number; initial_position: InitialXYZPosition; initial_target: InitialTarget }
export type CommentGroup = { name: string; comments: BrainComment[] }
export type Content = { label: string | null; html: string[]; requires: string[] }
export type Curve = { color: string }
export type DefinitionListProps = { definitions: DefinitionProps[] }
export type DefinitionProps = { color: string | null; id: string; term: RichText; definition: RichText }
export type GraphNode = { color: string; position: XYPosition; type: GraphNodeType; category: boolean | null; connections: { [key in string]: null }; label: string; content: { [key in string]: Content } | null; distance: number | null }
export type GraphNodeType = "primary" | "menu" | "menu__disabled" | "category" | "secondary"
export type IconName = "AvoidDistressingThoughts" | "Disassociation" | "Hypervigilance" | "PrologedPsychologicalStress" | "DistressingDreams" | "AvoidReminders" | "IrritbaleBehaviour" | "PsychologicalReactions" | "DistressingMemories" | "SleepDisturbance" | "ExageratedStartleResponse" | "Flashbacks"
export type IconProps = { name: IconName }
export type InitialTarget = { x: number; y: number; z: number }
export type InitialXYZPosition = { x: number; y: number; z: number }
export type InteractiveBrainProps = { id: string; description: RichText; definitionList: DefinitionListProps | null; groups: CommentGroup[] }
export type Map = { settings: MapSettings; size: Size; nodes: { [key in string]: null } }
export type MapSettings = { node_color: string; selected_node_color: string; connection_color: string }
export type NavProps = { routes: RouteTemplate[] }
export type NodeMapData = { curve: Curve; nodes: { [key in string]: GraphNode }; map: Map; camera: Camera }
export type PlaceholderContainerProps = { id: string; full_bleed: boolean; class: string }
export type PreferredSize = { x: number; y: number }
export type ReferencesProps = { references: Block }
export type RichText = { type: "Html"; data: string } | { type: "Tiptap"; data: any }
export type RichTextProps = { text: RichText }
export type RouteTemplate = { path: string; template: string }
export type Size = { min: number; preferred: PreferredSize; max: number; ratio: number }
export type Tab = { name: string; blocks: Block[] }
export type TabsProps = { id: string; tabs: Tab[]; representation: TabsRepresentation }
export type TabsRepresentation = "Standard" | "Swiper"
export type XYPosition = { x: number; z: number }
